# -*- coding: utf-8 -*-
"""attention.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cJDwesJJx55oB34lO7YHdlr108Myvwr3
"""

'''
import sys
from google.colab import drive
drive.mount('/content/drive')
sys.path.append('/content/drive/MyDrive/luoliang/CETEFeature_Based/Model_Transformer')
'''
"""几个问题：

① ```# import torch.nn.functional as F```

包含一些卷积、池化、正则化、激活、损失、dropout函数等

②clones方法作用？

"""

# attention.py

import torch
from torch import nn
import math
import torch.nn.functional as F
from train_utils import clones

def attention(query, key, value, mask=None, dropout=None):
    "Implementation of Scaled dot product attention"
    d_k = query.size(-1)
    #print("printing")
    #print(key.shape)
    #print("printed")
    '''
    .matmul
    Matrix product of two tensors.
    .transpose
    Returns a tensor that is a transposed(转置) version of input. The given dimensions dim0 and dim1 are swapped.
    '''
    scores = torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)
    if mask is not None:
      '''
      Fills elements of self tensor with value(-1e9) where mask(mask == 0) is True.
      '''
      scores = scores.masked_fill(mask == 0, -1e9)
    p_attn = F.softmax(scores, dim = -1)
    if dropout is not None:
        p_attn = dropout(p_attn)
    return torch.matmul(p_attn, value), p_attn

class MultiHeadedAttention(nn.Module):
    def __init__(self, h, d_model, dropout=0.1):
        "Take in model size and number of heads."
        super(MultiHeadedAttention, self).__init__()
        assert d_model % h == 0
        # We assume d_v always equals d_k
        self.d_k = d_model // h
        self.h = h
        self.linears = clones(nn.Linear(d_model, d_model), 4)
        self.attn = None
        '''
        During training, randomly zeroes some of the elements of the input tensor with probability p using samples 
        from a Bernoulli distribution. Each channel will be zeroed out independently on every forward call.
        '''
        self.dropout = nn.Dropout(p=dropout)
        
    def forward(self, query, key, value, mask=None):
        "Implements Multi-head attention"
        if mask is not None:
            # Same mask applied to all h heads.
            mask = mask.unsqueeze(1)
        nbatches = query.size(0)
        
        # 1) Do all the linear projections in batch from d_model => h x d_k 
        query, key, value = \
            [l(x).view(nbatches, -1, self.h, self.d_k).transpose(1, 2)
             for l, x in zip(self.linears, (query, key, value))]
        
        # 2) Apply attention on all the projected vectors in batch. 
        x, self.attn = attention(query, key, value, mask=mask, 
                                 dropout=self.dropout)
        
        # 3) "Concat" using a view and apply a final linear. 
        x = x.transpose(1, 2).contiguous() \
             .view(nbatches, -1, self.h * self.d_k)
        return self.linears[-1](x)