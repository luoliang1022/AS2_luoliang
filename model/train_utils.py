# -*- coding: utf-8 -*-
"""train_utils.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nJVOjP_rwbZdhlDak24-xckc0kx-ik7v
"""

# train_utils.py

import torch
from torch import nn
from torch.autograd import Variable
import copy
import math
#from Pytorch.Model_Transformer.utils import Dataset as utils
#from Pytorch.Model_Transformer.config import Config

"""clones这个方法干啥用"""

def clones(module, N):
    "Produce N identical layers."
    return nn.ModuleList([copy.deepcopy(module) for _ in range(N)])

"""nn.Module是PyTorch提供的神经网络类，并在类中实现了网络各层的定义及前向计算与反向传播机制。在实际使用时，如果想要实现某个神经网络，只需继承nn.Module，在初始化中定义模型结构与参数，在函数forward ()中编写网络前向过程即可
[nn.Module的理解](https://www.cnblogs.com/luckyplj/p/13378293.html)

几个问题：

①`def __init__(self, d_model, vocab, v, u):`各个参数代表什么

②lut代表什么

③forward函数什么作用
"""

#继承nn.Module类
class Embeddings(nn.Module):
    '''
    Usual Embedding layer with weights multiplied by sqrt(d_model)
    '''
    #用于定义网络模型各个层结构
    def __init__(self, d_model, vocab, v, u):
        super(Embeddings, self).__init__()
        #self.lut = nn.Embedding(vocab, d_model)
        #v.vectors=

        #config=Config()
        #u = utils(config)
        #print(u)
        self.lut = nn.Embedding(vocab, d_model).from_pretrained(v.vectors)
            #(v.vectors)
        #self.lut.weight.data.copy_(vocab.vectors)
        self.d_model = d_model
    #forward方法是必须要重写的，它是实现模型的功能，实现各个层之间的连接关系的核心。
    def forward(self, x):
        return self.lut(x) * math.sqrt(self.d_model)

class PositionalEncoding(nn.Module):
    "Implement the PE function."
    def __init__(self, d_model, dropout, max_len=5000):
        super(PositionalEncoding, self).__init__()
        self.dropout = nn.Dropout(p=dropout)
        
        # Compute the positional encodings once in log space.
        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, d_model, 2).float() *
                             -(math.log(10000.0) / d_model))
        pe[:, 0::2] = torch.sin(torch.as_tensor(position.numpy() * div_term.unsqueeze(0).numpy()))
        pe[:, 1::2] = torch.cos(torch.as_tensor(position.numpy() * div_term.unsqueeze(0).numpy()))#torch.cos(position * div_term)
        pe = pe.unsqueeze(0)
        self.register_buffer('pe', pe)
        
    def forward(self, x):
        x = x + Variable(self.pe[:, :x.size(1)], 
                         requires_grad=False)
        return self.dropout(x)